input AddCollectionInput {
  itemId: ID!
  num: Int = 1
  clientMutationId: String
}

type AddCollectionPayload {
  collectionEdge: CollectionEdge!
  clientMutationId: String
}

input AddEventInput {
  name: String!
  artistIds: [ID]!
  date: String!
  img: String!
  description: String
  clientMutationId: String
}

type AddEventPayload {
  eventEdge: EventEdge!
  clientMutationId: String
}

input AddExchangeInput {
  wishItemId: ID!
  posessionItemId: ID!
  acceptorId: ID!
  num: Int = 1
  clientMutationId: String
}

type AddExchangePayload {
  exchangeEdge: ExchangeEdge!
  clientMutationId: String
}

input AddGoodsInput {
  name: String!
  eventId: ID!
  artistId: ID!
  img: String!
  description: String
  clientMutationId: String
}

type AddGoodsPayload {
  goodsEdge: GoodsEdge!
  clientMutationId: String
}

input AddItemInput {
  idx: Int!
  memberIds: [ID]!
  goodsId: ID!
  clientMutationId: String
}

type AddItemPayload {
  itemEdge: ItemEdge!
  clientMutationId: String
}

input AddPosessionInput {
  itemId: ID!
  num: Int = 1
  clientMutationId: String
}

type AddPosessionPayload {
  posessionEdge: PosessionEdge!
  clientMutationId: String
}

input AddWishInput {
  itemId: ID!
  num: Int = 1
  clientMutationId: String
}

type AddWishPayload {
  wishEdge: WishEdge!
  clientMutationId: String
}

type Artist implements Node {
  """The ID of an object"""
  id: ID!
  artistId: ID!
  name: String!
  aliases: [String]
  description: String
  isGroup: Boolean!
  members: [Member]
  events(after: String, first: Int, before: String, last: Int): EventConnection
  goodsList: [Goods]
}

type Collection implements Node {
  """The ID of an object"""
  id: ID!
  collectionId: ID!
  userId: ID!
  item: Item!
  num: Int!
}

"""A connection to a list of items."""
type CollectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CollectionEdge]
}

"""An edge in a connection."""
type CollectionEdge {
  """The item at the end of the edge"""
  node: Collection

  """A cursor for use in pagination"""
  cursor: String!
}

type Event implements Node {
  """The ID of an object"""
  id: ID!
  eventId: ID!
  name: String!
  description: String
  date: String
  img: String
  goodsList(artistId: ID = "any", artistName: String = "any", after: String, first: Int, before: String, last: Int): GoodsConnection
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge"""
  node: Event

  """A cursor for use in pagination"""
  cursor: String!
}

type Exchange implements Node {
  """The ID of an object"""
  id: ID!
  exchangeId: ID!
  requestor: User!
  acceptor: User!
  reqPosessionItem: Item!
  accPosessionItem: Item!
  num: Int!
  createdAt: String!
  status: ExchangeStatus!
}

"""A connection to a list of items."""
type ExchangeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExchangeEdge]
}

"""An edge in a connection."""
type ExchangeEdge {
  """The item at the end of the edge"""
  node: Exchange

  """A cursor for use in pagination"""
  cursor: String!
}

type ExchangeList implements Node {
  """The ID of an object"""
  id: ID!
  exchanges(after: String, first: Int, before: String, last: Int): ExchangeConnection
}

enum ExchangeStatus {
  PROGESSING
  REJECTED
  COMPLETE
}

type Goods implements Node {
  """The ID of an object"""
  id: ID!
  goodsId: ID!
  name: String!
  img: String!
  description: String
}

"""A connection to a list of items."""
type GoodsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GoodsEdge]
}

"""An edge in a connection."""
type GoodsEdge {
  """The item at the end of the edge"""
  node: Goods

  """A cursor for use in pagination"""
  cursor: String!
}

type Item implements Node {
  """The ID of an object"""
  id: ID!
  itemId: ID!
  idx: Int!
  goods: Goods!
  members: [Member]!
  img: String
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge"""
  node: Item

  """A cursor for use in pagination"""
  cursor: String!
}

type ItemList implements Node {
  """The ID of an object"""
  id: ID!
  items(after: String, first: Int, before: String, last: Int): ItemConnection
}

type Match {
  wishItem: Item!
  posessionItem: Item!
  user: User!
}

type Member implements Node {
  """The ID of an object"""
  id: ID!
  memberId: ID!
  name: String!
  aliases: [String]
  description: String
}

input ModifyItemInput {
  id: ID!
  idx: Int
  memberIds: [ID]
  goodsId: ID!
  img: String
  clientMutationId: String
}

type ModifyItemPayload {
  itemEdge: ItemEdge!
  clientMutationId: String
}

type Mutation {
  addGoods(input: AddGoodsInput!): AddGoodsPayload
  addEvent(input: AddEventInput!): AddEventPayload
  addItem(input: AddItemInput!): AddItemPayload
  addCollection(input: AddCollectionInput!): AddCollectionPayload
  addPosession(input: AddPosessionInput!): AddPosessionPayload
  addWish(input: AddWishInput!): AddWishPayload
  removeCollection(input: RemoveCollectionInput!): RemoveCollectionPayload
  removeWish(input: RemoveWishInput!): RemoveWishPayload
  removePosession(input: RemovePosessionInput!): RemovePosessionPayload
  modifyItem(input: ModifyItemInput!): ModifyItemPayload
  addExchange(input: AddExchangeInput!): AddExchangePayload
  removeExchange(input: RemoveExchangeInput!): RemoveExchangePayload
  rejectExchange(input: RejectExchangeInput!): RejectExchangePayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Posession implements Node {
  """The ID of an object"""
  id: ID!
  posessionId: ID!
  userId: ID!
  item: Item!
  num: Int!
}

"""A connection to a list of items."""
type PosessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PosessionEdge]
}

"""An edge in a connection."""
type PosessionEdge {
  """The item at the end of the edge"""
  node: Posession

  """A cursor for use in pagination"""
  cursor: String!
}

type Query {
  viewer: User
  matches: [Match]!
  exchangeList: ExchangeList
  user(id: ID): User
  artist(name: String): Artist
  event(id: ID, goodsId: ID): Event
  goods(id: ID): Goods
  itemList(goodsId: ID): ItemList
  goodsList(artistName: String): GoodsConnection
  item(id: ID): Item
  exchange(id: ID): Exchange

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

input RejectExchangeInput {
  exchangeId: ID!
  clientMutationId: String
}

type RejectExchangePayload {
  rejectedExchangeId: ID!
  clientMutationId: String
}

input RemoveCollectionInput {
  itemId: ID!
  clientMutationId: String
}

type RemoveCollectionPayload {
  deletedCollectionId: ID!
  clientMutationId: String
}

input RemoveExchangeInput {
  exchangeId: ID!
  clientMutationId: String
}

type RemoveExchangePayload {
  deletedExchangeId: ID!
  clientMutationId: String
}

input RemovePosessionInput {
  itemId: ID!
  clientMutationId: String
}

type RemovePosessionPayload {
  deletedPosessionId: ID!
  clientMutationId: String
}

input RemoveWishInput {
  itemId: ID!
  clientMutationId: String
}

type RemoveWishPayload {
  deletedWishId: ID!
  clientMutationId: String
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  userId: ID!
  name: String!
  openChatLink: String
  tutorialComplete: Boolean
  admin: Boolean
  collects(after: String, first: Int, before: String, last: Int): CollectionConnection
  posesses(after: String, first: Int, before: String, last: Int): PosessionConnection
  wishes(after: String, first: Int, before: String, last: Int): WishConnection
}

type Wish implements Node {
  """The ID of an object"""
  id: ID!
  wishId: ID!
  userId: ID!
  item: Item!
  num: Int!
}

"""A connection to a list of items."""
type WishConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WishEdge]
}

"""An edge in a connection."""
type WishEdge {
  """The item at the end of the edge"""
  node: Wish

  """A cursor for use in pagination"""
  cursor: String!
}
